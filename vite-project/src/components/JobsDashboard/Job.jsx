import React, { useRef, useState, useEffect } from "react";
import { useDispatch } from "react-redux";
import { updateJobAsync } from "../../redux/jobs/thunks";
import Button from '@mui/material/Button';
import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import '../../styles/Job.css';
import Tags from "../Tags";
import Fab from '@mui/material/Fab';
import AddIcon from '@mui/icons-material/Add';
import Chip from '@mui/material/Chip';
import TextField from '@mui/material/TextField';
import EditIcon from '@mui/icons-material/Edit';
import Tooltip, { tooltipClasses } from '@mui/material/Tooltip';
import { IconButton } from "@mui/material";
import { styled, alpha } from '@mui/material/styles';
import { useTheme } from "@emotion/react";
import EditJob from "./EditJob";
import Modal from '@mui/material/Modal';


export default function Job({job}) {
    // console.log({job})
    const theme = useTheme();
    const dispatch = useDispatch();

    const [jobTitle, setJobTitle] = useState('');
    const [company, setCompany] = useState('');
    const [jobType, setJobType] = useState('');
    const [location, setLocation] = useState('');
    const [dateApplied, setDateApplied] = useState('');
    const [duration, setDuration] = useState('');
    const [link, setLink] = useState('');
    const [coverLetter, setCoverLetter] = useState('');
    const [tailoredCoverLetter, setTailoredCoverLetter] = useState('');
    const [tags, setTags] = useState([])
    const [tag, setTag] = useState('')
    const [temptags, setTempTags] = useState([])
    const [isModalOpen, setIsModalOpen] = useState(false); // State for modal visibility

    const jobTitleInputRef = useRef();
    const companyInputRef = useRef();
    const jobTypeInputRef = useRef();
    const locationInputRef = useRef();
    const dateAppliedInputRef = useRef();
    const durationInputRef = useRef();
    const linkInputRef = useRef();
    const coverLetterInputRef = useRef();
    const tailoredCoverLetterInputRef = useRef();

    const [anchorEl, setAnchorEl] = React.useState(null);
    const open = Boolean(anchorEl);
    const handleClick = (event) => {
        setAnchorEl(event.currentTarget);
    };
    const handleClose = () => {
        setAnchorEl(null);
    };

    // The following snippet of code for useEffect and value={<some job field value>} in
    // each job-field container was generated by ChatGPT 3.5 on June 20, 2024
    // The prompt was: "why isn't the job details panel on the right changing accordingly 
    // when a different job is selected on the left jobList panel?", including feeding
    // it the code in JobsContainer.jsx, JobList.jsx and the previous code for Job.jsx
    useEffect(() => {
        if (job) {
            console.log('Job data received (Job.jsx):', job);
            setJobTitle(job.jobTitle || '');
            setCompany(job.company || '');
            setJobType(job.jobType || '');
            setLocation(job.location || '');
            setDateApplied(job.dateApplied || '');
            setDuration(job.duration || '');
            setLink(job.link || '');
            setCoverLetter(job.coverLetter || '');
            setTailoredCoverLetter(job.tailoredCoverLetter || '');
            setTags(job.tags || [])
            setTempTags(job.tags || [])
        }
    }, [job])

    // useEffect(() => {
    //     console.log(temp_tags)
    // }, [temp_tags])
 
    // The following useEffect and adjustWidth function was generated by ChatGPT 3.5 on June 20, 2024
    // The promt was: "how do I make it so that the input in Jobs.jsx actually fit to the length of the
    // text contained within it? as you can see, the job title is being cut off", including a screenshot
    // that showed how the text fields were cutt off
    useEffect(() => {
        adjustWidth(jobTitleInputRef.current);
        adjustWidth(companyInputRef.current);
        adjustWidth(jobTypeInputRef.current);
        adjustWidth(locationInputRef.current);
        adjustWidth(dateAppliedInputRef.current);
        adjustWidth(durationInputRef.current);
        adjustWidth(coverLetterInputRef.current);
        adjustWidth(tailoredCoverLetterInputRef.current);
    }, [jobTitle, company, jobType, location, dateApplied, duration, link, coverLetter, tailoredCoverLetter]);

    const adjustWidth = (input) => {
        if (input) {
            input.style.width = `${input.value.length + 1}ch`;
        }
    }

    const StyledTooltip = styled(({ className, ...props }) => (
        <Tooltip {...props} classes={{ popper: className }} />
      ))(({ theme }) => ({
        [`& .${tooltipClasses.tooltip}`]: {
        //   backgroundColor: '#FFFFFF',
        //   color: 'rgba(0, 0, 0, 0.87)',
        //   boxShadow: theme.shadows[1],
          fontSize: 12,
          fontFamily: "Montserrat",
          borderRadius: '30px'
        },
      }));

    const handleEditClick = () => {
        setIsModalOpen(true);
    };

    const handleModalClose = () => {
        setIsModalOpen(false);
    };
    

    return(
        <>
        <div className="bg-bg flex flex-col justify-center h-full">
        <div className="jobView w-[80%] m-auto h-[70%] overflow-y-scroll border rounded-[35px] bg-white">
            <div className="flex justify-center p-8 border-b">
                    <h1 className="text-3xl font-semibold">{jobTitle}</h1>
            </div>
            {/* <div className="flex border-b">
                <div className="font-bold w-52 p-[30px] border-r flex items-center">
                    Job Title:
                </div>
                <div className="p-[30px] grow"> 
                    <div className=" relative">
                        <input type="text" name="" id="" value={jobTitle} className="p-2 pl-6"/> 
                    </div> 
                </div>
            </div> */}
            <div className="flex border-b">
                <div className="font-semibold w-[208px] p-[30px] border-r flex items-center text-xl">
                    Company:
                </div>
                <div className="p-[30px] grow">
                    <div className=" relative">
                        <input type="text" name="" id="" value={company} className="p-2 pl-6 text-xl"/> 
                    </div>
                </div>
            </div>

            <div className=" flex border-b">
                <div className="font-semibold w-[208px] p-[30px] border-r flex items-center text-xl">
                    Job Type:
                </div>
                <div className="p-[30px] grow">
                    <div className=" relative">
                        <input type="text" name="" id="" value={jobType} className="p-2 pl-6 text-xl"/>
                    </div> 
                </div>
            </div>

            <div className=" flex border-b">
                <div className="font-semibold w-[208px] p-[30px] border-r flex items-center text-xl">
                    Location:
                </div>
                <div className="p-[30px] grow">
                    <div className=" relative">
                        <input type="text" name="" id="" value={location} className="p-2 pl-6 text-xl"/>
                    </div>
                </div>
            </div>

            <div className=" flex border-b">
                <div className="font-semibold w-[208px] p-[30px] border-r flex items-center text-xl">
                    Date Applied:
                </div>
                <div className="p-[30px] grow">
                    <div className=" relative">
                        <input type="text" name="" id="" value={dateApplied} className="p-2 pl-6 text-xl"/>
                    </div>
                </div>
            </div>

            <div className=" flex border-b">
                <div className="font-semibold w-[208px] p-[30px] border-r flex items-center text-xl">
                    Duration:
                </div>
                <div className="p-[30px] grow">
                    <div className=" relative">
                        <input type="text" name="" id="" value={duration} className="p-2 pl-6 text-xl"/>
                    </div>
                </div>
            </div>

            <div className=" flex border-b">
                <div className="font-semibold w-[208px] p-[30px] border-r flex items-center text-xl">
                    Link:
                </div>
                <div className="p-[30px] grow">
                    <div className=" relative">
                        <input type="text" name="" id="" value={duration} className="p-2 pl-6 text-xl"/>
                    </div> 
                </div>
            </div>
            <div className=" flex border-b">
                <div className="font-semibold w-[208px] p-[30px] border-r flex items-center text-xl">
                    Tags:
                </div>
                <div className="p-[30px] grow"> 
                        {/* code for editing tags: */}
                        {/* <input id="tags" 
                                className="auto-width-input"
                                value={tag}
                                onChange={(e) => {
                                    setTag(e.target.value);
                                    adjustWidth(e.target);
                                }}> */}
                        {/* <div className="flex justify-center"> */}
                            {/* <input type="text" name="" id="" value={duration} className="p-2 pl-6 text-xl"/> */}

                            {/* <Fab size="small" 
                                sx={{
                                    backgroundColor: theme.palette.darkTeal,
                                    '&:hover': {
                                        backgroundColor: '#07606B'
                                        // backgroundColor: theme.palette.teal
                                    },
                                    color: theme.palette.bg // Text color of the icon
                                }}
                                aria-label="add" 
                                className="add-tag" 
                                onClick={() => {
                                    if (tag != ''){console.log("pushing"); 
                                    let new_tags = [...temptags]; new_tags.push(tag); 
                                    setTempTags([...new_tags]); setTag(''); 
                                    console.log('updated tags:', temptags)}}}> 
                                <AddIcon />
                            </Fab> */}
                        {/* </div> */}
                         
                        {/* <input type="button" className="add-tag" value="+" onClick={() => {if (tag != ''){console.log("pushing"); let new_tags = [...temptags]; new_tags.push(tag); setTempTags([...new_tags]); console.log(temptags)}}}/> */}
                        <div className="p-2 pl-6 flex lex-auto flex-row items-center">
                                {console.log(temptags)}
                                {/* <div className="flex-auto flex-row items-center">*/}
                                {temptags.map((tag, i) => {
                                        console.log(tag);
                                        // return <div className="rounded-md bg-sky-400 w-[100px] flex justify-between p-1"><div className="">{tag}</div> <input type="button" value="X" onClick={() => {let new_tags = [...temptags]; new_tags.splice(i, 1); setTempTags([...new_tags]); console.log(temptags)}}/> </div> 
                                        return <Chip
                                            label={tag}
                                            sx={{
                                                fontFamily: "Montserrat",
                                                marginRight: 1.5,
                                                // padding: 0.5,
                                                // paddingRight: 0.5,
                                                // paddingLeft: 0.5,
                                                // paddingTop: 2,
                                                // paddingBottom: 2,
                                                fontSize: 16
                                            }}
                                            // onDelete={() => {let new_tags = [...temptags]; new_tags.splice(i, 1); setTempTags([...new_tags]); console.log(temptags)}} 
                                            />
                                })}
                        </div>
                    </div>
            </div>
            <div className=" flex">
                <div className="font-semibold w-[208px] p-[30px] border-r flex items-center text-xl">
                    Cover Letter Used:
                </div>
                <div className="p-[30px] rounded-br-[30px] flex justify-center items-center"> 
                    <div className="pl-6">
                            <Button
                                                                        id="basic-button"
                                                                        aria-controls={open ? 'basic-menu' : undefined}
                                                                        aria-haspopup="true"
                                                                        aria-expanded={open ? 'true' : undefined}
                                                                        onClick={handleClick}
                                                                    >
                                                                        Cover Letter:
                            </Button>
                            <Menu
                                                                        id="basic-menu"
                                                                        anchorEl={anchorEl}
                                                                        open={open}
                                                                        onClose={handleClose}
                                                                        MenuListProps={{
                                                                        'aria-labelledby': 'basic-button',
                                                                        }}
                                                                    >
                                                                        <MenuItem onClick={handleClose}>Profile</MenuItem>
                                                                        <MenuItem onClick={handleClose}>My account</MenuItem>
                                                                        <MenuItem onClick={handleClose}>Logout</MenuItem>
                            </Menu>
                    </div>

                    <div className="pl-6">
                            <Button
                                                                        id="basic-button"
                                                                        aria-controls={open ? 'basic-menu' : undefined}
                                                                        aria-haspopup="true"
                                                                        aria-expanded={open ? 'true' : undefined}
                                                                        onClick={handleClick}
                                                                    >
                                                                        Tailored Cover Letter:
                            </Button>
                            <Menu
                                                                        id="basic-menu"
                                                                        anchorEl={anchorEl}
                                                                        open={open}
                                                                        onClose={handleClose}
                                                                        MenuListProps={{
                                                                        'aria-labelledby': 'basic-button',
                                                                        }}
                                                                    >
                                                                        <MenuItem onClick={handleClose}>Profile</MenuItem>
                                                                        <MenuItem onClick={handleClose}>My account</MenuItem>
                                                                        <MenuItem onClick={handleClose}>Logout</MenuItem>
                            </Menu>
                    </div>
                </div>
            </div>
        </div>
    
    {/*notepad ends here*/}
        
        <div className="options">
            {/* <EditJob job={job}></EditJob> */}
            <StyledTooltip title="Edit job">
                <IconButton onClick={handleEditClick}>
                    <EditIcon fontSize='large' sx={{color: '#666666'}}></EditIcon>
                </IconButton>
            </StyledTooltip>
            <Modal
                open={isModalOpen}
                onClose={handleModalClose}
                aria-labelledby="edit-job-modal-title"
                aria-describedby="edit-job-modal-description"
            >
                <div className="flex justify-center items-center">
                <EditJob job={job} handleModalClose={handleModalClose} />
                </div>
                
            </Modal>
            
            {/* <span className="cancel" onClick={() => {
                jobTitleInputRef.current.value = job.jobTitle;
                companyInputRef.current.value = job.company;
                jobTypeInputRef.current.value = job.jobType;
                locationInputRef.current.value = job.location;
                dateAppliedInputRef.current.value = job.dateApplied;
                durationInputRef.current.value = job.duration;
                linkInputRef.current.value = job.link;
                coverLetterInputRef.current.value = job.coverLetter;
                tailoredCoverLetterInputRef.current.value = job.tailoredCoverLetter;
                setTempTags([...tags])
            }}>Cancel</span>
            <span className="update" onClick={() => {
                console.log('dispatching update job async');
                dispatch(updateJobAsync({id: job._id, fields: {jobTitle, company, jobType, location, dateApplied, duration, link, coverLetter, tailoredCoverLetter, temptags}}));
                setTags([...temptags])
            }}>Save Changes</span>  */}
        </div>
        </div>
        </>
    );
} 

 