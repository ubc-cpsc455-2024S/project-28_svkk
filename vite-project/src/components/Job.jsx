import React, { useRef, useState, useEffect } from "react";
import { useDispatch } from "react-redux";
import { updateJobAsync } from "../redux/jobs/thunks";
import '../styles/Job.css';

export default function Job({job}) {
    // console.log({job})
    const dispatch = useDispatch();

    const [jobTitle, setJobTitle] = useState('');
    const [company, setCompany] = useState('');
    const [jobType, setJobType] = useState('');
    const [location, setLocation] = useState('');
    const [dateApplied, setDateApplied] = useState('');
    const [duration, setDuration] = useState('');
    const [link, setLink] = useState('');

    const jobTitleInputRef = useRef();
    const companyInputRef = useRef();
    const jobTypeInputRef = useRef();
    const locationInputRef = useRef();
    const dateAppliedInputRef = useRef();
    const durationInputRef = useRef();
    const linkInputRef = useRef();

    // The following snippet of code for useEffect and value={<some job field value>} in
    // each job-field container was generated by ChatGPT 3.5 on June 20, 2024
    // The prompt was: "why isn't the job details panel on the right changing accordingly 
    // when a different job is selected on the left jobList panel?", including feeding
    // it the code in JobsContainer.jsx, JobList.jsx and the previous code for Job.jsx
    useEffect(() => {
        if (job) {
            setJobTitle(job.jobTitle || '');
            setCompany(job.company || '');
            setJobType(job.jobType || '');
            setLocation(job.location || '');
            setDateApplied(job.dateApplied || '');
            setDuration(job.duration || '');
            setLink(job.link || '');
        }
    }, [job])

    // The following useEffect and adjustWidth function was generated by ChatGPT 3.5 on June 20, 2024
    // The promt was: "how do I make it so that the input in Jobs.jsx actually fit to the length of the
    // text contained within it? as you can see, the job title is being cut off", including a screenshot
    // that showed how the text fields were cutt off
    useEffect(() => {
        adjustWidth(jobTitleInputRef.current);
        adjustWidth(companyInputRef.current);
        adjustWidth(jobTypeInputRef.current);
        adjustWidth(locationInputRef.current);
        adjustWidth(dateAppliedInputRef.current);
        adjustWidth(durationInputRef.current);
    }, [jobTitle, company, jobType, location, dateApplied, duration, link]);

    const adjustWidth = (input) => {
        if (input) {
            input.style.width = `${input.value.length + 1}ch`;
        }
    }

    return(
        <>
        <form className="job-details">
            <div className="job-field">
                <label htmlFor="jobTitle">
                    <b>Job Title:  </b>
                </label> 
                <input id="jobTitle" 
                        className="auto-width-input"
                        // defaultValue={job.jobTitle} 
                        value={jobTitle}
                        ref={jobTitleInputRef} 
                        onChange={(e) => {
                            setJobTitle(e.target.value);
                            adjustWidth(e.target);
                        }}>
                </input>
            </div>
            <div className="job-field">
                <label htmlFor="company">
                    <b>Company:  </b>
                </label> 
                <input id="company" 
                        className="auto-width-input"
                        value={company}
                        ref={companyInputRef}
                        onChange={(e) => {
                            setCompany(e.target.value);
                            adjustWidth(e.target);
                        }}>
                </input>
            </div>
            <div className="job-field">
                <label htmlFor="job-type">
                    <b>Job Type:  </b>
                </label> 
                <input id="job-type" 
                        className="auto-width-input"
                        value={jobType}
                        ref={jobTypeInputRef}
                        onChange={(e) => {
                            setJobType(e.target.value);
                            adjustWidth(e.target);
                        }}>
                </input>
            </div>
            <div className="job-field">
                <label htmlFor="location">
                    <b>Location:  </b>
                </label> 
                <input id="location" 
                        className="auto-width-input"
                        value={location}
                        ref={locationInputRef}
                        onChange={(e) => {
                            setLocation(e.target.value);
                            adjustWidth(e.target);
                        }}>
                </input>
            </div>
            <div className="job-field">
                <label htmlFor="date-applied">
                    <b>Date Applied:  </b>
                </label> 
                <input id="date-applied" 
                        className="auto-width-input"
                        value={dateApplied}
                        ref={dateAppliedInputRef}
                        onChange={(e) => {
                            setDateApplied(e.target.value);
                            adjustWidth(e.target);
                        }}>
                </input>
            </div>
            <div className="job-field">
                <label htmlFor="duration">
                    <b>Duration:  </b>
                </label> 
                <input id="duration" 
                        className="auto-width-input"
                        value={duration}
                        ref={durationInputRef}
                        onChange={(e) => {
                            setDuration(e.target.value);
                            adjustWidth(e.target);
                        }}>
                </input>
            </div>

            <div className="job-field">
                <label htmlFor="link">
                    <b><a href={job.link} target="_blank" rel="noopener noreferrer"> <u>Link</u></a> to job posting:  </b>
                </label> 
                <input id="link" 
                        className="auto-width-input"
                        value={link}
                        ref={linkInputRef}
                        onChange={(e) => {
                            setLink(e.target.value);
                            adjustWidth(e.target);
                        }}>
                </input>
            </div>

            <div className="coverletter-field">
                <label htmlFor="coverletter">
                    <b>Cover Letter Used: </b>
                </label> 
                <textarea id="coverletter">
                </textarea>
            </div>
        </form>

        <div className="options">
            <span className="cancel" onClick={() => {
                jobTitleInputRef.current.value = job.jobTitle;
                companyInputRef.current.value = job.company;
                jobTypeInputRef.current.value = job.jobType;
                locationInputRef.current.value = job.location;
                dateAppliedInputRef.current.value = job.dateApplied;
                durationInputRef.current.value = job.duration;
                linkInputRef.current.value = job.link;
            }}>Cancel</span>
            <span className="update" onClick={() => {
                dispatch(updateJobAsync({id: job.id, fields: {jobTitle, company, jobType, location, dateApplied, duration, link}}));
            }}>Save Changes</span> 
        </div>
        </>
    );
}